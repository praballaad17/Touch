{"version":3,"sources":["components/loader.js","components/messages/conversationBox.js","components/messages/newConversationModal.js","components/messages/conversationList.js","components/messages/messages.js"],"names":["ReactLoader","type","color","height","width","className","ConversationBox","useConversations","selectedConversation","sendMessage","setSelectedConversationGroupId","useState","text","setText","setRef","useCallback","node","scrollIntoView","smooth","handleSubmit","membersId","_id","style","display","alignItems","icon","faArrowLeft","onClick","src","DEFAULT_IMAGE_PATH","alt","faInfoCircle","messages","map","message","index","lastMessage","length","ref","fromMe","faEllipsisH","senderName","faImage","opacity","position","left","onKeyUp","e","key","onInput","preventDefault","target","value","placeholder","faPaperPlane","NewConversationModal","onClose","selected","setselected","selectedId","setselectedId","search","setSearch","pageNumber","setPageNumber","createGroup","useSearch","result","loading","ReactDom","createPortal","faTimes","disabled","faSearch","LOADING_ANI_PATH","user","filter","u","username","id","deleteSelected","profileImg","fullName","prev","addtoSelected","document","getElementById","ConversationList","onsearch","setOnsearch","modal","setModal","conversations","faCog","faEnvelopeOpen","querySelector","conversation","members","Messages","setUnseen","useEffect","title","retriveGroups","selectedConversationGroupId","a"],"mappings":"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","file":"static/js/9.743872c9.chunk.js","sourcesContent":["import Loader from 'react-loader-spinner';\n\nexport default function ReactLoader() {\n  return (\n\n    <Loader\n      type=\"TailSpin\"\n      color=\"#00000059\"\n      height={70}\n      width={70}\n      className=\"flex justify-center mt-12\"\n    />\n  );\n}\n","import { faArrowLeft, faEllipsisH, faImage, faInfoCircle, faPaperPlane } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport React, { useCallback, useState } from 'react'\r\nimport { DEFAULT_IMAGE_PATH } from '../../constants/paths'\r\nimport { useConversations } from '../../context/conversationProvider'\r\nimport ReactLoader from '../loader'\r\n\r\nexport default function ConversationBox() {\r\n    const { selectedConversation, sendMessage, setSelectedConversationGroupId } = useConversations()\r\n    const [text, setText] = useState(\"\")\r\n\r\n    const setRef = useCallback(node => {\r\n        if (node) {\r\n            node.scrollIntoView({ smooth: true })\r\n        }\r\n    }, [])\r\n\r\n    const handleInput = (e) => {\r\n        e.preventDefault()\r\n        const message = e.target.value\r\n        setText(message)\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        setText(\"\")\r\n        sendMessage(selectedConversation.membersId, text, selectedConversation._id)\r\n    }\r\n    const handleKey = (e) => {\r\n        if (e.key === 'Enter') {\r\n            handleSubmit()\r\n        }\r\n    }\r\n\r\n    if (!selectedConversation) return (\r\n        <>\r\n            <div className=\"convbox__notselected\">\r\n                <div className=\"convbox__notselected-box\">\r\n                    <div className=\"convbox__notselected-head\">You donâ€™t have a message selected</div>\r\n                    <div className=\"convbox__notselected-message\">Choose one from your existing messages, or start a new one.</div>\r\n                    <button className=\"btn btn--tertiary\" >New Messages</button>\r\n                </div>\r\n            </div>\r\n            <div className=\"convbox__notselected-mob\">\r\n                <ReactLoader />\r\n            </div>\r\n        </>\r\n    )\r\n    else return (\r\n        <div className=\"convbox\">\r\n            <div className=\"convbox__head\">\r\n                <div style={{ display: \"flex\", alignItems: \"center\" }} >\r\n                    <div className=\"u-icon convbox__head-back\" ><FontAwesomeIcon icon={faArrowLeft} onClick={() => setSelectedConversationGroupId()} /></div>\r\n                    <img className=\"convbox__head-img\" src={DEFAULT_IMAGE_PATH} alt=\"profile-img\" />\r\n                </div>\r\n                <div className=\"convbox__head-title\">\r\n                    {selectedConversation._id}\r\n                </div>\r\n                <div className=\"u-icon\"><FontAwesomeIcon icon={faInfoCircle} /></div>\r\n            </div>\r\n            <div className=\"convbox__box\">\r\n                {selectedConversation.messages.map((message, index) => {\r\n                    const lastMessage = selectedConversation.messages.length - 1 === index\r\n                    return (\r\n                        <div key={index} ref={lastMessage ? setRef : null} className={`convbox__box-message ${message.fromMe ? 'convbox__box-message-me' : 'convbox__box-message-other'}`} >\r\n                            <div className={`convbox__box-message-textbox ${message.fromMe ? 'convbox__box-message-textbox-me' : 'convbox__box-message-textbox-other'}`} >\r\n                                <div className=\"u-icon convbox__box-message-textbox-icon\"><FontAwesomeIcon icon={faEllipsisH} /></div>\r\n                                <div className={`convbox__box-message-text ${message.fromMe ? 'convbox__box-message-text-me' : 'convbox__box-message-text-other'}`}>{message.text}</div>\r\n                            </div>\r\n                            <div className=\"convbox__box-message-details\">{message.fromMe ? 'You' : message.senderName}</div>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n            <div className=\"convbox__form\">\r\n                <label className=\"u-icon\">\r\n                    <FontAwesomeIcon icon={faImage} />\r\n                    <input type=\"file\" style={{ opacity: 0, position: \"absolute\", left: \"-99999px\" }} />\r\n                </label>\r\n                {/* <textarea className=\"convbox__form-input\" onInput={handleInput} placeholder=\"Start a New Message\" /> */}\r\n                <input className=\"convbox__form-input\" type=\"text\" onKeyUp={handleKey} onInput={handleInput} value={text} placeholder=\"Start a New Message\" />\r\n                <div className=\"u-icon\" onClick={handleSubmit}><FontAwesomeIcon icon={faPaperPlane} /></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { faSearch, faTimes } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport React, { useState } from 'react'\r\nimport ReactDom from 'react-dom'\r\nimport { DEFAULT_IMAGE_PATH, LOADING_ANI_PATH } from '../../constants/paths'\r\nimport { useConversations } from '../../context/conversationProvider'\r\nimport useSearch from '../../hooks/use-search'\r\n\r\nexport default function NewConversationModal({ onClose }) {\r\n    const [selected, setselected] = useState([])\r\n    const [selectedId, setselectedId] = useState([])\r\n    const [search, setSearch] = useState()\r\n    const [pageNumber, setPageNumber] = useState(1)\r\n    const { createGroup } = useConversations()\r\n\r\n    const handleSearch = (e) => {\r\n        e.preventDefault()\r\n        setSearch(e.target.value)\r\n        setPageNumber(1)\r\n    }\r\n\r\n    const { result, loading } = useSearch(search, pageNumber)\r\n\r\n    const addtoSelected = (user) => {\r\n        setselected(prev => [...prev, user])\r\n        setselectedId(prev => [...prev, user._id])\r\n    }\r\n\r\n    const deleteSelected = (user) => {\r\n        setselected(selected.filter(u => u.username !== user.username))\r\n        setselected(selectedId.filter(id => id !== user._id))\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        createGroup(selectedId, selected)\r\n        onClose()\r\n    }\r\n    return ReactDom.createPortal(\r\n        <>\r\n            <div className=\"modal-layout\" onClick={onClose}></div>\r\n            <div className=\"modal-newconv\">\r\n                <div className=\"modal-newconv__heading\">\r\n                    <div className=\"u-icon\" onClick={onClose}><FontAwesomeIcon icon={faTimes} /></div>\r\n                    <div className=\"modal-newconv__heading-main\">New Messages</div>\r\n                    <button disabled={!selected.length} className={`btn btn--grey ${!selected.length && 'u-opacity-50'}`} onClick={handleSubmit}>Create</button>\r\n                </div>\r\n                <div className=\"modal-newconv__search\">\r\n                    <div className=\"modal-newconv__search-box\">\r\n                        <FontAwesomeIcon icon={faSearch} />\r\n                        <input className=\"modal-newconv__search-input\" type=\"text\" onInput={handleSearch} placeholder=\"Search People\" />\r\n                        {loading && <img className=\"search__loading\" src={LOADING_ANI_PATH} alt=\"loading\" />}\r\n                    </div>\r\n                    {selected.length ? <div className=\"modal-newconv__search-selected\">\r\n                        {selected.map(user => (\r\n                            <div className=\"modal-newconv__search-selected-user\" onClick={() => deleteSelected(user)}>\r\n                                <img className=\"modal-newconv__search-selected-img\" src={user.profileImg.length ? user.profileImg : DEFAULT_IMAGE_PATH} alt=\"profile-img\" />\r\n                                <span>{user.fullName}</span>\r\n                                <FontAwesomeIcon className=\"modal-newconv__search-selected-icon\" icon={faTimes} />\r\n                            </div>\r\n                        ))}\r\n                    </div> : <></>}\r\n                </div>\r\n\r\n                <div className=\"modal-newconv__result\">\r\n                    {result.map(user => (\r\n                        <div className=\"modal-newconv__result-user\" onClick={() => addtoSelected(user)}>\r\n                            <img className=\"modal-newconv__result-user-img\" src={user.profileImg.length ? user.profileImg : DEFAULT_IMAGE_PATH} loading=\"prfileimg\" />\r\n                            <div className=\"modal-newconv__result-user-info\">\r\n                                <span>{user.fullName}</span>\r\n                                <span className=\"modal-newconv__result-user-info-username\">@{user.username}</span>\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </>,\r\n        document.getElementById(\"modal\"))\r\n}\r\n","import { faArrowLeft, faCog, faEnvelopeOpen, faSearch, faTimes } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport React, { useState } from 'react'\r\nimport { DEFAULT_IMAGE_PATH, LOADING_ANI_PATH } from '../../constants/paths'\r\nimport { useConversations } from '../../context/conversationProvider'\r\nimport ReactLoader from '../loader'\r\nimport NewConversationModal from './newConversationModal'\r\n\r\nexport default function ConversationList() {\r\n    const [onsearch, setOnsearch] = useState(false)\r\n    const [modal, setModal] = useState(false)\r\n    const [search, setSearch] = useState()\r\n    const result = []\r\n\r\n    const { conversations, setSelectedConversationGroupId, loading } = useConversations()\r\n    // console.log(conversations[0].messages[conversations[0].messages.length - 1]);\r\n    const handleSearch = () => {\r\n        setOnsearch(true)\r\n\r\n    }\r\n    const handleInput = (e) => {\r\n        setSearch(e.target.value)\r\n    }\r\n    const handleClear = () => {\r\n        setSearch(\"\")\r\n        let input = document.querySelector('.convlist__search-input')\r\n        input.value = \"\"\r\n    }\r\n    return (\r\n        <div className=\"convlist\">\r\n            <div className=\"convlist__head\">\r\n                <div className=\"heading-black\">\r\n                    Messages\r\n                </div>\r\n                <div className=\"convlist__head-right\">\r\n                    <div className=\"u-icon\"><FontAwesomeIcon icon={faCog} /></div>\r\n                    <div className=\"u-icon\" onClick={() => setModal(true)}><FontAwesomeIcon icon={faEnvelopeOpen} /></div>\r\n                </div>\r\n            </div>\r\n            {loading ? <div className=\"convlist__loading\">\r\n                <ReactLoader />\r\n            </div> : <>\r\n                {conversations.length ?\r\n                    <>\r\n                        <div className=\"convlist__search\">\r\n                            {onsearch && <div className=\"u-icon\" onClick={() => setOnsearch(false)}>\r\n                                <FontAwesomeIcon icon={faArrowLeft} />\r\n                            </div>}\r\n                            <div className=\"convlist__search-box\">\r\n                                <div className=\"convlist__search-inputbox\">\r\n                                    <FontAwesomeIcon icon={faSearch} />\r\n                                    <input className=\"convlist__search-input\" onInput={handleInput} type=\"text\" onClick={handleSearch} placeholder=\"Search for People or Group\" />\r\n                                </div>\r\n                                {search && !loading && <div className=\"u-icon\" onClick={handleClear}><FontAwesomeIcon icon={faTimes} /></div>}\r\n                                {loading && <img className=\"search__loading\" src={LOADING_ANI_PATH} alt=\"loading\" />}\r\n                            </div>\r\n                        </div>\r\n\r\n                    </> :\r\n                    <div className=\"convlist__nolist\">\r\n                        <div className=\"convlist__nolist-head\" >Send a message, get a message</div>\r\n                        <div className=\"convlist__nolist-message\">Direct Messages are private conversations between you and other people on Touch. Share Touch, media, and more!</div>\r\n                        <button className=\"btn btn--tertiary\" onClick={() => setModal(true)} >Start Conversation</button>\r\n                    </div>\r\n                }\r\n\r\n                {onsearch && <div className=\"convlist__result\">\r\n                    {!result?.length ? <div className=\"convlist__result-noresult\">\r\n                        Try searching for people or groups\r\n                    </div> :\r\n                        <div>\r\n\r\n                        </div>\r\n                    }\r\n                </div>}\r\n\r\n                {!onsearch && <div className=\"convlist__list\">\r\n                    {conversations.map(conversation => (\r\n                        <>\r\n                            {/* {console.log(conversation.messages[conversation.messages.length - 1])} */}\r\n                            <div className=\"convlist__list-conv\" onClick={() => setSelectedConversationGroupId(conversation._id)}>\r\n                                <img className=\"convlist__list-conv-img\" src={DEFAULT_IMAGE_PATH} alt=\"profile-img\" />\r\n                                <div className=\"convlist__list-conv__cont\">\r\n                                    <div className=\"convlist__list-conv__mem\">{conversation.members.map(user => <div>&nbsp;{user.fullName},</div>)}</div>\r\n                                    <div>{conversation.messages[conversation.messages.length - 1]?.text}</div>\r\n                                </div>\r\n                            </div>\r\n                        </>\r\n                    ))}\r\n                </div>}\r\n                <div className=\"convlist__newconv\" onClick={() => setModal(true)}> <FontAwesomeIcon icon={faEnvelopeOpen} /></div>\r\n            </>}\r\n\r\n            {modal && <NewConversationModal onClose={() => setModal(false)} />}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { useConversations } from '../../context/conversationProvider';\r\n// import * as ROUTES from '../../constants/routes'\r\nimport ConversationBox from './conversationBox'\r\n\r\nimport ConversationList from './conversationList'\r\n\r\nexport default function Messages() {\r\n    const { setUnseen } = useConversations()\r\n    useEffect(() => {\r\n        document.title = 'Messages | Touch';\r\n        setUnseen(0)\r\n    }, []);\r\n    const { retriveGroups, selectedConversationGroupId } = useConversations()\r\n    useEffect(async () => {\r\n        await retriveGroups()\r\n    }, [])\r\n    // console.log(selectedConversationGroupId);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"message\">\r\n                <div className=\"message__convlist\">\r\n                    <ConversationList />\r\n                </div>\r\n                <div className=\"message__convbox\">\r\n                    <ConversationBox />\r\n                    {/* <Route path={ROUTES.CONVERSATION} component={ConversationBox} />\r\n                    <Route path={ROUTES.GROUPINFO} component={Profile} />\r\n                    <Route path={ROUTES.MESSAGES} component={Profile} /> */}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"message-mob\">\r\n                {!selectedConversationGroupId ?\r\n                    <div className=\"message-mob__convlist\">\r\n                        <ConversationList />\r\n                    </div> :\r\n                    <div className=\"message-mob__convbox\">\r\n                        <ConversationBox />\r\n                    </div>\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n"],"sourceRoot":""}